theme(legend.position="none") +
theme(text = element_text(size=20))
ggplot(plot_df, aes(x = scenario, y =accuracy, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = accuracy), stat = "identity", vjust = -1, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.3), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("Number of users in the simulation"),
y = toupper("Accuracy"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
ggplot(plot_df, aes(x = scenario, y =accuracy, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = accuracy), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("Number of users in the simulation"),
y = toupper("Accuracy"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
ggplot(plot_df, aes(x = scenario, y =accuracy, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = accuracy), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("Accuracy for each scenario"),
y = toupper("Accuracy"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
table(scenario3$Class)/nrow(scenario3)
setwd("~/Documents/Github/Slides/eng_talk")
plot_df <- plot_df %>%
mutate(fpr = fp/(fp+fn))
# Chunk 1: setup
options(htmltools.dir.version = FALSE)
# Chunk 2
# generate the random data
pacman::p_load(dplyr, ggplot2, caret, tidyr, purrr, viridis)
set.seed(123)
training <- twoClassSim(n = 10000, noiseVars = 5, corrValue = .8, linearVars = 5)
levels(training$Class) <- c("default", "non-default")
# plot a sample dataset that shows the relationship between a noise variable, a twofactor variable a linear variable, and a non-linear variable.
plot_df <- training %>% select(TwoFactor1, TwoFactor2, Linear3, Linear2, Nonlinear3, Noise3, Class)
colnames(plot_df) <- c("Real or Not1?", "Real or Not2?", "Real or Not3?", "Real or Not4?",
"Real or Not5?", "Real or Not6?", "Outcome")
plot_df <- gather(plot_df, key = predictor, value = value, -Outcome)
# examine the distributions for each variable
ggplot(plot_df, aes(x = value, color = Outcome)) +
geom_density() +
facet_wrap(~predictor) +
theme_bw() +
labs(title = "Which of the following looks like a real predictor to you?")
# Chunk 3
# create data for the 3 scenarios
scenario1 <- twoClassSim(n = 10000, noiseVars = 5,
corrValue = .8, linearVars = 5, intercept = -4)
scenario1$scenario <- "scenario1"
scenario2 <- twoClassSim(n = 10000, noiseVars = 5,
corrValue = .8, linearVars = 5, intercept = 1.7)
scenario2$scenario <- "scenario2"
scenario3 <- twoClassSim(n = 10000, noiseVars = 5,
corrValue = .8, linearVars = 5,
intercept = 13)
scenario3$scenario <- "scenario3"
#table(scenario1$Class)/nrow(scenario1)
#table(scenario2$Class)/nrow(scenario2)
#table(scenario3$Class)/nrow(scenario3)
data <- rbind(scenario1, scenario2, scenario3)
by_scenario <- data %>%
group_by(scenario) %>%
nest()
# function to be used in modeling
rpart_model <- function(df){
rpart::rpart(Class ~ ., data = df)
}
# apply the model to every scenario
by_scenario <- by_scenario %>%
mutate(model = map(data, rpart_model))
# add predictions
by_scenario <- by_scenario %>%
ungroup() %>%
mutate(predictions = map(model, predict),
predictions = map(predictions, as.data.frame))
data_with_pred <- by_scenario %>% unnest(predictions)
data_with_pred$Class <- data$Class
# generate A, B, C, D columns
data_with_pred <- data_with_pred %>%
mutate(Outcome =
case_when(
.$Class1 >= .5 & .$Class == "Class1" ~ "true_positive",
.$Class1 >= .5 & .$Class == "Class2" ~ "false_positive",
.$Class1 < .5 & .$Class == "Class1" ~ "false_negative",
.$Class1 < .5 & .$Class == "Class2" ~ "true_negative"))
# Chunk 4
# calculate accuracy for each scenario and plot it
plot_df <- data_with_pred %>%
group_by(scenario) %>%
summarise(fp = sum(Outcome == "false_positive"),
fn = sum(Outcome == "false_negative"),
tn = sum(Outcome == "true_negative"),
tp = sum(Outcome == "true_positive")) %>%
mutate(accuracy = (tp+tn)/(tp+tn+fp+fn))
ggplot(plot_df, aes(x = scenario, y =accuracy, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = accuracy), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("Accuracy for each scenario"),
y = toupper("Accuracy"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
plot_df <- plot_df %>%
mutate(fpr = fp/(fp+fn))
ggplot(plot_df, aes(x = scenario, y =fpr, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = fpr), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("FPR for each scenario"),
y = toupper("FPR"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
plot_df <- plot_df %>%
mutate(fpr = round(fp/(fp+fn),2))
ggplot(plot_df, aes(x = scenario, y =fpr, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = fpr), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("FPR for each scenario"),
y = toupper("FPR"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
plot_df <- plot_df %>%
mutate(fpr = round(fp/(fp+fn),2))
ggplot(plot_df, aes(x = scenario, y =fpr, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = fpr), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("FPR for each scenario"),
y = toupper("FPR"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
plot_df <- plot_df %>%
mutate(fpr = round(fp/(fp+tn),2))
ggplot(plot_df, aes(x = scenario, y =fpr, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = fpr), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("FPR for each scenario"),
y = toupper("FPR"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
plot_df <- plot_df %>%
mutate(fnr = round(fn/(fn+tp),2))
ggplot(plot_df, aes(x = scenario, y =fnr, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = fnr), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("FPR for each scenario"),
y = toupper("FPR"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
# Chunk 1: setup
options(htmltools.dir.version = FALSE)
# Chunk 2
# generate the random data
pacman::p_load(dplyr, ggplot2, caret, tidyr, purrr, viridis)
set.seed(123)
training <- twoClassSim(n = 10000, noiseVars = 5, corrValue = .8, linearVars = 5)
levels(training$Class) <- c("default", "non-default")
# plot a sample dataset that shows the relationship between a noise variable, a twofactor variable a linear variable, and a non-linear variable.
plot_df <- training %>% select(TwoFactor1, TwoFactor2, Linear3, Linear2, Nonlinear3, Noise3, Class)
colnames(plot_df) <- c("Real or Not1?", "Real or Not2?", "Real or Not3?", "Real or Not4?",
"Real or Not5?", "Real or Not6?", "Outcome")
plot_df <- gather(plot_df, key = predictor, value = value, -Outcome)
# examine the distributions for each variable
ggplot(plot_df, aes(x = value, color = Outcome)) +
geom_density() +
facet_wrap(~predictor) +
theme_bw() +
labs(title = "Which of the following looks like a real predictor to you?")
# Chunk 3
# create data for the 3 scenarios
scenario1 <- twoClassSim(n = 10000, noiseVars = 5,
corrValue = .8, linearVars = 5, intercept = -4)
scenario1$scenario <- "scenario1"
scenario2 <- twoClassSim(n = 10000, noiseVars = 5,
corrValue = .8, linearVars = 5, intercept = 1.7)
scenario2$scenario <- "scenario2"
scenario3 <- twoClassSim(n = 10000, noiseVars = 5,
corrValue = .8, linearVars = 5,
intercept = 13)
scenario3$scenario <- "scenario3"
#table(scenario1$Class)/nrow(scenario1)
#table(scenario2$Class)/nrow(scenario2)
#table(scenario3$Class)/nrow(scenario3)
data <- rbind(scenario1, scenario2, scenario3)
by_scenario <- data %>%
group_by(scenario) %>%
nest()
# function to be used in modeling
rpart_model <- function(df){
rpart::rpart(Class ~ ., data = df)
}
# apply the model to every scenario
by_scenario <- by_scenario %>%
mutate(model = map(data, rpart_model))
# add predictions
by_scenario <- by_scenario %>%
ungroup() %>%
mutate(predictions = map(model, predict),
predictions = map(predictions, as.data.frame))
data_with_pred <- by_scenario %>% unnest(predictions)
data_with_pred$Class <- data$Class
# generate A, B, C, D columns
data_with_pred <- data_with_pred %>%
mutate(Outcome =
case_when(
.$Class1 >= .5 & .$Class == "Class1" ~ "true_positive",
.$Class1 >= .5 & .$Class == "Class2" ~ "false_positive",
.$Class1 < .5 & .$Class == "Class1" ~ "false_negative",
.$Class1 < .5 & .$Class == "Class2" ~ "true_negative"))
# Chunk 4
# calculate accuracy for each scenario and plot it
plot_df <- data_with_pred %>%
group_by(scenario) %>%
summarise(fp = sum(Outcome == "false_positive"),
fn = sum(Outcome == "false_negative"),
tn = sum(Outcome == "true_negative"),
tp = sum(Outcome == "true_positive")) %>%
mutate(accuracy = (tp+tn)/(tp+tn+fp+fn))
ggplot(plot_df, aes(x = scenario, y =accuracy, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = accuracy), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("Accuracy for each scenario"),
y = toupper("Accuracy"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
# Chunk 1: setup
options(htmltools.dir.version = FALSE)
# Chunk 2
# generate the random data
pacman::p_load(dplyr, ggplot2, caret, tidyr, purrr, viridis)
set.seed(123)
training <- twoClassSim(n = 10000, noiseVars = 5, corrValue = .8, linearVars = 5)
levels(training$Class) <- c("default", "non-default")
# plot a sample dataset that shows the relationship between a noise variable, a twofactor variable a linear variable, and a non-linear variable.
plot_df <- training %>% select(TwoFactor1, TwoFactor2, Linear3, Linear2, Nonlinear3, Noise3, Class)
colnames(plot_df) <- c("Real or Not1?", "Real or Not2?", "Real or Not3?", "Real or Not4?",
"Real or Not5?", "Real or Not6?", "Outcome")
plot_df <- gather(plot_df, key = predictor, value = value, -Outcome)
# examine the distributions for each variable
ggplot(plot_df, aes(x = value, color = Outcome)) +
geom_density() +
facet_wrap(~predictor) +
theme_bw() +
labs(title = "Which of the following looks like a real predictor to you?")
# Chunk 3
# create data for the 3 scenarios
scenario1 <- twoClassSim(n = 10000, noiseVars = 5,
corrValue = .8, linearVars = 5, intercept = -4)
scenario1$scenario <- "scenario1"
scenario2 <- twoClassSim(n = 10000, noiseVars = 5,
corrValue = .8, linearVars = 5, intercept = 1.7)
scenario2$scenario <- "scenario2"
scenario3 <- twoClassSim(n = 10000, noiseVars = 5,
corrValue = .8, linearVars = 5,
intercept = 13)
scenario3$scenario <- "scenario3"
#table(scenario1$Class)/nrow(scenario1)
#table(scenario2$Class)/nrow(scenario2)
#table(scenario3$Class)/nrow(scenario3)
data <- rbind(scenario1, scenario2, scenario3)
by_scenario <- data %>%
group_by(scenario) %>%
nest()
# function to be used in modeling
rpart_model <- function(df){
rpart::rpart(Class ~ ., data = df)
}
# apply the model to every scenario
by_scenario <- by_scenario %>%
mutate(model = map(data, rpart_model))
# add predictions
by_scenario <- by_scenario %>%
ungroup() %>%
mutate(predictions = map(model, predict),
predictions = map(predictions, as.data.frame))
data_with_pred <- by_scenario %>% unnest(predictions)
data_with_pred$Class <- data$Class
# generate A, B, C, D columns
data_with_pred <- data_with_pred %>%
mutate(Outcome =
case_when(
.$Class1 >= .5 & .$Class == "Class1" ~ "true_positive",
.$Class1 >= .5 & .$Class == "Class2" ~ "false_positive",
.$Class1 < .5 & .$Class == "Class1" ~ "false_negative",
.$Class1 < .5 & .$Class == "Class2" ~ "true_negative"))
# Chunk 4
# calculate accuracy for each scenario and plot it
plot_df <- data_with_pred %>%
group_by(scenario) %>%
summarise(fp = sum(Outcome == "false_positive"),
fn = sum(Outcome == "false_negative"),
tn = sum(Outcome == "true_negative"),
tp = sum(Outcome == "true_positive")) %>%
mutate(accuracy = (tp+tn)/(tp+tn+fp+fn))
ggplot(plot_df, aes(x = scenario, y =accuracy, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = accuracy), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("Accuracy for each scenario"),
y = toupper("Accuracy"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
plot_df <- plot_df %>%
mutate(sens = round(fp/(fp+tn),2))
ggplot(plot_df, aes(x = scenario, y =sens, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sens), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("Sensitivity for each scenario"),
y = toupper("Sensitivity"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
plot_df <- plot_df %>%
mutate(sens = round(tp/(tp+fn),2))
ggplot(plot_df, aes(x = scenario, y =sens, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sens), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("Sensitivity for each scenario"),
y = toupper("Sensitivity"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
plot_df <- plot_df %>%
mutate(speci = round(tn/(tn+fp),2))
ggplot(plot_df, aes(x = scenario, y =speci, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = speci), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("FNR for each scenario"),
y = toupper("FNR"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
plot_df <- plot_df %>%
mutate(speci = round(tn/(tn+fp),2))
ggplot(plot_df, aes(x = scenario, y =speci, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = speci), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("Specificity for each scenario"),
y = toupper("FNR"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
plot_df <- plot_df %>%
mutate(precision = round(tp/(tp+fp),2))
ggplot(plot_df, aes(x = scenario, y =precision, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = precision), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("Specificity for each scenario"),
y = toupper("Specificity"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
plot_df <- plot_df %>%
mutate(F1 = round(2*precision*sens/(precision+sens),2))
View(plot_df)
plot_df <- plot_df %>%
mutate(F1 = round(2*precision*sens/(precision+sens),2))
ggplot(plot_df, aes(x = scenario, y =F1, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = F1), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("F1 for each scenario"),
y = toupper("F1"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
plot_df <- plot_df %>%
mutate(mcc = round((tp*tn-fp*fn)/sqrt((tp+fp)*(tp*fn)*(tn*fp)*(tn+fn)),2))
ggplot(plot_df, aes(x = scenario, y =mcc, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = mcc), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("MCC for each scenario"),
y = toupper("MCC"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
ggplot(plot_df, aes(x = scenario, y =mcc, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = mcc), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(-1, 1), breaks = seq(-1, 1, 0.1), labels = seq(-1, 1, 0.1)) +
labs(title = toupper("MCC for each scenario"),
y = toupper("MCC"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
plot_df
plot_df <- plot_df %>%
mutate(mcc = round((tp*tn-fp*fn)/sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn)),2))
(3949+4133)
(3949+1017)*(3949+901)*(4133+1017)*(4133*901)
(3949+1017)*(3949+901)*(4133+1017)*(4133*901)
sqrt((3949+1017)*(3949+901)*(4133+1017)*(4133*901))
(3949*4133)-(1017*901)
15404900/679630624
plot_df <- plot_df %>%
mutate(mcc = (tp*tn-fp*fn)/sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn)))
str(plot_df)
plot_df <- plot_df %>%
mutate(mcc = (tp*tn-fp*fn))
.Machine$integer.max
plot_df <- plot_df %>%
mutate_each(funs(as.numeric), fp, fn, tn, tp) %>%
mutate(mcc = (tp*tn-fp*fn)/sqrt((tp+fp)*(tp+fn)(tn+fp)*(tn+fn)))
plot_df
plot_df <- plot_df %>%
mutate_each(funs(as.numeric), fp, fn, tn, tp)
plot_df
plot_df <- plot_df %>%
mutate_each(funs(as.numeric), fp, fn, tn, tp) %>%
mutate(mcc = (tp*tn-fp*fn)/sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn)))
plot_df
ggplot(plot_df, aes(x = scenario, y =mcc, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = mcc), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(-1, 1), breaks = seq(-1, 1, 0.1), labels = seq(-1, 1, 0.1)) +
labs(title = toupper("MCC for each scenario"),
y = toupper("MCC"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
ggplot(plot_df, aes(x = scenario, y =mcc, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = mcc), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("MCC for each scenario"),
y = toupper("MCC"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
plot_df
plot_df <- plot_df %>%
mutate_each(funs(as.numeric), fp, fn, tn, tp) %>%
mutate(mcc = round((tp*tn-fp*fn)/sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn)),2))
ggplot(plot_df, aes(x = scenario, y =mcc, fill = scenario)) +
geom_bar(stat = "identity") +
geom_text(aes(label = mcc), stat = "identity", vjust = -0.5, size = 12) +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1)) +
labs(title = toupper("MCC for each scenario"),
y = toupper("MCC"),
x = toupper("Scenario")) +
theme(legend.position="none") +
theme(text = element_text(size=20))
